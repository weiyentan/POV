<?xml version="1.0" encoding="utf-8" ?>
<helpItems xmlns="http://msh" schema="maml">
	<!--Edited with: SAPIEN PowerShell HelpWriter 2016 v1.1.20-->
	<!--Generated by: SAPIEN PowerShell HelpWriter 2016 v1.1.20-->
	<!--
		Module: 		POV
		Version:		0.0
	-->
	<!--All Commands-->
	<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
		<!--Command-->
		<command:details>
			<command:name>Invoke-POVTest</command:name>
			<maml:description>
				<maml:para>This function passes objects over the pipeline to pass to pester.</maml:para>
			</maml:description>
			<maml:copyright>
				<maml:para/>
			</maml:copyright>
			<command:verb>Invoke</command:verb>
			<command:noun>POVTest</command:noun>
			<dev:version/>
		</command:details>
		<maml:description>
			<maml:para>This function receives objects over the pipeline and passes the properties to pester test as a parameter. You can pass multiple objects to this function.</maml:para>
		</maml:description>
		<command:syntax>
			<!--Parameter Sets-->
			<command:syntaxItem>
				<maml:name>Invoke-POVTest</maml:name>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName, ByValue)" position="1">
					<maml:name>inputobject</maml:name>
					<maml:description>
						<maml:para/>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">PSObject</command:parameterValue>
				</command:parameter>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="2" aliases="">
					<maml:name>testpath</maml:name>
					<maml:description>
						<maml:para>This is the path of the Pester test. In the test it will have to incorporate the parameters that you have set in your object.</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
					<dev:defaultValue/>
				</command:parameter>
				<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="3" aliases="">
					<maml:name>credential</maml:name>
					<maml:description>
						<maml:para>These are the credentials that can be passed into the Pester test. The pester test will also have to incorporate the credential parameter too. This parameter is not mandatory and was added for convenience.</maml:para>
					</maml:description>
					<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
					<dev:defaultValue/>
				</command:parameter>
			</command:syntaxItem>
		</command:syntax>
		<command:parameters>
			<!--All Parameters-->
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName, ByValue)" position="1">
				<maml:name>inputobject</maml:name>
				<maml:description>
					<maml:para/>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSObject</command:parameterValue>
				<dev:type>
					<maml:name>PSObject</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue/>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="2" aliases="">
				<maml:name>testpath</maml:name>
				<maml:description>
					<maml:para>This is the path of the Pester test. In the test it will have to incorporate the parameters that you have set in your object.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">String</command:parameterValue>
				<dev:type>
					<maml:name>String</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue/>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="True (ByPropertyName)" position="3" aliases="">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>These are the credentials that can be passed into the Pester test. The pester test will also have to incorporate the credential parameter too. This parameter is not mandatory and was added for convenience.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
				<dev:type>
					<maml:name>PSCredential</maml:name>
					<maml:uri/>
				</dev:type>
				<dev:defaultValue/>
			</command:parameter>
			<command:parameter required="false" globbing="false" pipelineInput="false" position="named" aliases="">
				<maml:name>Quiet</maml:name>
				<maml:description>
					<maml:para>Disables the output Pester writes to screen. No other output is generated unless you specify PassThru, or one of the Output parameters.</maml:para>
				</maml:description>
				<command:parameterValue required="false"/>
				<dev:defaultValue/>
			</command:parameter>
			<command:parameter required="false" globbing="false" pipelineInput="false" position="named" aliases="">
				<maml:name>Passthru</maml:name>
				<maml:description>
					<maml:para>  Returns a Pester result object containing the information about the whole test run, and each test.</maml:para>
				</maml:description>
				<command:parameterValue required="false"/>
				<dev:defaultValue/>
			</command:parameter>
			<command:parameter required="false" globbing="false" pipelineInput="false" position="named" aliases="">
				<maml:name>Exclude</maml:name>
				<maml:description>
					<maml:para>This parameter allows you to exclude properties that are going over the pipeline</maml:para>
				</maml:description>
				<command:parameterValue required="false">string</command:parameterValue>
				<dev:defaultValue/>
			</command:parameter>
		</command:parameters>
		<command:inputTypes>
			<!--Inputs-->
			<command:inputType>
				<dev:type>
					<maml:name>System.Management.Automation.PSObject
System.String
System.Management.Automation.PSCredential
					</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para/>
				</maml:description>
			</command:inputType>
		</command:inputTypes>
		<command:returnValues>
			<!--Outputs-->
			<command:returnValue>
				<dev:type>
					<maml:name>System.Object</maml:name>
					<maml:uri/>
				</dev:type>
				<maml:description>
					<maml:para/>
				</maml:description>
			</command:returnValue>
		</command:returnValues>
		<maml:alertSet>
			<maml:title/>
			<!--Notes-->
			<maml:alert>
				<maml:para>The purpose of this function is to pass values from an object into a Pester test. For example  you need to test a number of servers that you have standardised tests, but on a number of them you might have a value that is particular to that server ie ip addresses, computer names.

These parameters can be passed through to the pester test.</maml:para>
			</maml:alert>
		</maml:alertSet>
		<command:examples>
			<!--Examples-->
			<command:example>
				<maml:title>-------------------------- EXAMPLE 1 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>$a | Invoke-POVTest - testpath c:\tests\Basic.test.ps1</dev:code>
				<dev:remarks>
					<maml:para>In this example the cmdlet is receiving the object $a down the pipeline. The properties of $a are then passed through to the Pester Test Basic.test.ps1</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 2 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Invoke-POVTest $a - testpath c:\tests\Basic.test.ps1</dev:code>
				<dev:remarks>
					<maml:para>This is putting the object positionally in the function. It is passing the $a object properties to the Pester test basic.tests.ps1.</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 3 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>Invoke-POVTest $a - testpath c:\tests\Basic.test.ps1 -passthru -quiet</dev:code>
				<dev:remarks>
					<maml:para>
					</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 4 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>$csv | ForEach-Object {$_ | Invoke-POVTest -testpath &apos;C:\test\pov pester test\povpester.test.ps1&apos;}</dev:code>
				<dev:remarks>
					<maml:para>This example shows the $csv variable (which is a collection of objects from a csv) being passed to  the foreach-object. The Foreach-object handles each item passed across the pipeline.</maml:para>
				</dev:remarks>
			</command:example>
			<command:example>
				<maml:title>-------------------------- EXAMPLE 5 --------------------------</maml:title>
				<maml:introduction>
					<maml:para>PS C:\&gt;</maml:para>
				</maml:introduction>
				<dev:code>$csv | ForEach-Object {$_ | Invoke-POVTest -testpath &apos;C:\test\pov pester test\Server_compliance.test.ps1&apos; -Exclude &apos;Description&apos;, &apos;Memory&apos; }</dev:code>
				<dev:remarks>
					<maml:para>This example will pass the objects coming from the CSV to the pester test Server_compliance.test but it will exclude the description and memory properties.</maml:para>
				</dev:remarks>
			</command:example>
		</command:examples>
	</command:command>
	<!--Generated by: SAPIEN PowerShell HelpWriter 2016 v1.1.20-->
</helpItems>